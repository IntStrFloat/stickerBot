"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const grammy_1 = require("grammy");
const sharp_1 = __importDefault(require("sharp"));
function initial() {
    return { newStickerSetName: '', stickerPacks: [], type: '', selectedStickerPack: null };
}
const bot = new grammy_1.Bot('xxx'); // <-- –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
bot.use((0, grammy_1.session)({ initial }));
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
function checkSubscription(ctx) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        // –ó–∞–º–µ–Ω–∏—Ç–µ 'channelusername' –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        const member = yield ctx.api.getChatMember('@STR_memes', (_b = (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : 1);
        return (member.status === 'member' || member.status === 'creator' || member.status === 'administrator');
    });
}
function getRandomString() {
    let result = '';
    const characters = 'abcdefghijklmnopqrstuvwxyzGQWERTTYUIOPASDHGFKCN';
    for (let i = 0; i < 7; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield checkSubscription(ctx)) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const keyboard = new grammy_1.InlineKeyboard()
            .text('–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üåÜ', 'create')
            .row()
            .text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ üåÖ', 'edit')
            .row()
            .text('–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ üåâ', 'copy');
        yield ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
    }
    else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å–∏–º –µ–≥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\\
        const keyboard = new grammy_1.InlineKeyboard()
            .url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1 ‚úÖ', 'https://t.me/STR_memes')
            .url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 2 ‚úÖ', 'https://t.me/STR_memes');
        yield ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:', {
            reply_markup: keyboard,
        });
    }
}));
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.callbackQuery('create', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield checkSubscription(ctx)) {
        const keyboard = new grammy_1.Keyboard()
            .text('üñº –û–±—ã—á–Ω—ã–µ')
            .text('üé• –í–∏–¥–µ–æ')
            .row()
            .text('‚û°Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
            .resized();
        ctx.reply('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.', {
            reply_markup: keyboard,
        });
        yield ctx.answerCallbackQuery();
    }
    else {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
    }
}));
bot.hears('‚û°Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield checkSubscription(ctx)) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const keyboard = new grammy_1.InlineKeyboard()
            .text('–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üåÜ', 'create')
            .row()
            .text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ üåÖ', 'edit')
            .row()
            .text('–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ üåâ', 'copy');
        yield ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
    }
    else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å–∏–º –µ–≥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\\
        const keyboard = new grammy_1.InlineKeyboard()
            .url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1 ‚úÖ', 'https://t.me/STR_memes')
            .url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 2 ‚úÖ', 'https://t.me/STR_memes');
        yield ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:', {
            reply_markup: keyboard,
        });
    }
}));
bot.hears('üñº –û–±—ã—á–Ω—ã–µ', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield checkSubscription(ctx)) {
        ctx.reply('üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞');
        ctx.session.newStickerSetName = 'waiting_for_name';
        ctx.session.type = 'photo';
    }
    else {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
    }
}));
bot.hears('üé• –í–∏–¥–µ–æ', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield checkSubscription(ctx)) {
        ctx.reply('üé• –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞');
        ctx.session.newStickerSetName = 'waiting_for_name_video';
        ctx.session.type = 'video';
    }
    else {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
    }
}));
bot.on('message:text', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    if (ctx.session.newStickerSetName === 'waiting_for_name') {
        const stickerName = ctx.message.text; // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ -> –≤—ã–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è
        ctx.session.newStickerSetName = stickerName; // –ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
        console.log(ctx.session.stickerPacks);
        yield ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.');
    }
    else if (ctx.session.newStickerSetName === 'waiting_for_name_video') {
        const stickerName = ctx.message.text;
        ctx.session.newStickerSetName = stickerName;
        console.log(ctx.session.stickerPacks);
        yield ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫');
    }
    else if (ctx.session.newStickerSetName === 'waiting_for_name_sticker') {
        const stickerName = ctx.message.text; // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞(—Å–æ —Å—Ç–∏–∫–µ—Ä–æ–≤) -> –≤—ã–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è
        ctx.session.newStickerSetName = stickerName; // –ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
        console.log(ctx.session.stickerPacks);
        yield ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ–¥–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.');
    }
    else if ((ctx.session.newStickerSetName = 'waiting_for_name_change')) {
        const stickerName = ctx.message.text;
        ctx.session.newStickerSetName = stickerName;
        try {
            console.log(ctx.session.selectedStickerPack);
            console.log(ctx.message.text);
            yield ctx.api.setStickerSetTitle((_a = ctx.session.selectedStickerPack) !== null && _a !== void 0 ? _a : 'MyPack', `${ctx.message.text}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`);
            ctx.session.stickerPacks = (_b = ctx.session.stickerPacks) === null || _b === void 0 ? void 0 : _b.map((el) => {
                if (el.name == ctx.session.selectedStickerPack) {
                    return { title: ctx.message.text, name: el.name };
                }
                else {
                    return el;
                }
            });
            yield ctx.reply(`–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${ctx.message.text}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`);
            console.log(ctx.session.stickerPacks);
        }
        catch (error) {
            yield ctx.reply(`${error}`);
        }
    }
}));
bot.on('message:sticker', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _c, _d, _e, _f, _g;
    try {
        if (ctx.session.newStickerSetName == 'waiting_for_del_sticker_from_set') {
            const stickerId = ctx.message.sticker.file_id;
            try {
                yield ctx.api.deleteStickerFromSet(stickerId);
                yield ctx.reply('–°—Ç–∏–∫–µ—Ä —É–¥–∞–ª—ë–Ω');
                ctx.session.newStickerSetName = 'waiting_for_name';
            }
            catch (error) {
                yield ctx.reply('–°—Ç–∏–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—å—Å—è –≤ –Ω–∞–±–æ—Ä–µ');
            } // —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞
        }
        else if (ctx.session.newStickerSetName == 'waiting_for_add_sticker_to_set') {
            const stickerSet = yield ctx.api.getStickerSet((_c = ctx.session.selectedStickerPack) !== null && _c !== void 0 ? _c : '');
            const stickerId = ctx.message.sticker.file_id;
            console.log(stickerSet);
            console.log(ctx.message.sticker);
            const stickerType = ctx.message.sticker.is_video;
            if (!stickerType && !stickerSet.is_video) {
                const stickerId = ctx.message.sticker.file_id;
                yield ctx.api.addStickerToSet(ctx.from.id, (_d = ctx.session.selectedStickerPack) !== null && _d !== void 0 ? _d : '', {
                    sticker: stickerId,
                    emoji_list: ['üôÇ'],
                });
                yield ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω ');
                ctx.session.newStickerSetName = 'waiting_for_name';
            }
            else if (stickerType && stickerSet.is_video) {
                const stickerId = ctx.message.sticker.file_id;
                yield ctx.api.addStickerToSet(ctx.from.id, (_e = ctx.session.selectedStickerPack) !== null && _e !== void 0 ? _e : '', {
                    sticker: stickerId,
                    emoji_list: ['üôÇ'],
                });
                yield ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω ');
                ctx.session.newStickerSetName = 'waiting_for_name';
            }
            else {
                yield ctx.reply('–¢–∏–ø —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ —Å–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞');
            }
        }
        else if (ctx.session.newStickerSetName &&
            ctx.session.newStickerSetName != 'waiting_for_name') {
            const sticker = ctx.message.sticker.set_name;
            const stickerSet = yield ctx.api.getStickerSet(`${sticker}`);
            const length = stickerSet.stickers.length;
            if (length > 50) {
                yield ctx.reply('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ!');
                return;
            }
            let stickerSetForNewPack = [];
            for (let i = 0; i < length; i++) {
                // –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ-—Å—Ç–∏–∫–µ—Ä
                if (stickerSet.stickers[i].is_video) {
                    yield ctx.reply('–í–∏–¥–µ–æ —Å—Ç–∏–∫–µ—Ä—ã - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
                }
                else {
                    stickerSetForNewPack.push({
                        sticker: stickerSet.stickers[i].file_id,
                        emoji_list: [(_f = stickerSet.stickers[i].emoji) !== null && _f !== void 0 ? _f : ''],
                        is_video: stickerSet.is_video,
                    });
                }
            }
            console.log(stickerSet);
            console.log(stickerSetForNewPack);
            const name = `${getRandomString()}_by_${bot.botInfo.username}`;
            console.log(name);
            yield ctx.api.createNewStickerSet(ctx.from.id, name, `${ctx.session.newStickerSetName}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`, stickerSetForNewPack, stickerSet.is_video ? 'video' : stickerSet.is_animated ? 'animated' : 'static');
            const userLocalStickerSet = yield ctx.api.getStickerSet(name);
            ctx.api.sendSticker(ctx.chat.id, userLocalStickerSet.stickers[0].file_id);
            (_g = ctx.session.stickerPacks) === null || _g === void 0 ? void 0 : _g.push({ title: ctx.session.newStickerSetName, name: name });
            console.log(ctx.session.stickerPacks);
            ctx.session.newStickerSetName = 'waiting_for_name';
        }
        else {
            yield ctx.reply('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞');
        }
    }
    catch (error) {
        yield ctx.reply(`${error}`);
    }
}));
bot.on('message:photo', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _h, _j, _k, _l, _m, _o;
    if (ctx.session.newStickerSetName == 'waiting_for_add_sticker_to_set') {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const fileId = (_h = ctx.message) === null || _h === void 0 ? void 0 : _h.photo[((_j = ctx.message) === null || _j === void 0 ? void 0 : _j.photo.length) - 1].file_id;
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            const file = yield ctx.api.getFile(fileId !== null && fileId !== void 0 ? fileId : '');
            // –°–æ—Å—Ç–∞–≤–ª—è–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞
            const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            const response = yield axios_1.default.get(fileUrl, { responseType: 'arraybuffer' });
            // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ 512x512 —Å –ø–æ–º–æ—â—å—é sharp
            const resizedPhoto = yield (0, sharp_1.default)(response.data)
                .resize(512, 512, { fit: 'contain', position: 'center' })
                .toBuffer();
            const stickerFile = new grammy_1.InputFile(resizedPhoto, 'sticker.png');
            yield ctx.api.addStickerToSet(ctx.from.id, (_k = ctx.session.selectedStickerPack) !== null && _k !== void 0 ? _k : '', {
                sticker: stickerFile,
                emoji_list: ['üôÇ'],
            });
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            yield ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
        }
        catch (error) {
            console.error(error);
        }
    }
    else if (ctx.session.newStickerSetName) {
        const fileId = (_l = ctx.message) === null || _l === void 0 ? void 0 : _l.photo[((_m = ctx.message) === null || _m === void 0 ? void 0 : _m.photo.length) - 1].file_id;
        // –°–æ—Å—Ç–∞–≤–ª—è–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞
        const file = yield ctx.api.getFile(fileId !== null && fileId !== void 0 ? fileId : '');
        const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        const response = yield axios_1.default.get(fileUrl, { responseType: 'arraybuffer' });
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ 512x512 —Å –ø–æ–º–æ—â—å—é sharp
        const resizedPhoto = yield (0, sharp_1.default)(response.data).resize(512, 512).toBuffer();
        const stickerFile = new grammy_1.InputFile(resizedPhoto, 'sticker.png');
        const sticker = {
            sticker: stickerFile,
            emoji_list: ['üôÇ'],
        };
        const name = `${getRandomString()}_by_${bot.botInfo.username}`;
        yield ctx.api.createNewStickerSet(ctx.from.id, name, `${ctx.session.newStickerSetName}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`, [sticker], 'static');
        (_o = ctx.session.stickerPacks) === null || _o === void 0 ? void 0 : _o.push({
            name: name,
            title: ctx.session.newStickerSetName,
        });
        const userLocalStickerSet = yield ctx.api.getStickerSet(name);
        ctx.api.sendSticker(ctx.chat.id, userLocalStickerSet.stickers[0].file_id);
    }
}));
bot.on('message:document', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _p, _q;
    console.log(1);
    if (ctx.session.newStickerSetName == 'waiting_for_add_sticker_to_set') {
        const fileId = ctx.message.document.file_id;
        yield ctx.api.addStickerToSet(ctx.from.id, (_p = ctx.session.selectedStickerPack) !== null && _p !== void 0 ? _p : '', {
            sticker: fileId,
            emoji_list: ['üôÇ'],
        });
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        yield ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    else if (ctx.session.newStickerSetName) {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π ID –≤–∏–¥–µ–æ
        console.log(2);
        const fileId = ctx.message.document.file_id;
        try {
            const sticker = {
                sticker: fileId,
                emoji_list: ['üôÇ'],
                is_video: true,
            };
            const name = `${getRandomString()}_by_${bot.botInfo.username}`;
            yield ctx.api.createNewStickerSet(ctx.from.id, name, `${ctx.session.newStickerSetName}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`, [sticker], 'video');
            (_q = ctx.session.stickerPacks) === null || _q === void 0 ? void 0 : _q.push({
                name: name,
                title: ctx.session.newStickerSetName,
            });
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const userLocalStickerSet = yield ctx.api.getStickerSet(name);
            ctx.api.sendSticker(ctx.chat.id, userLocalStickerSet.stickers[0].file_id);
            yield ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
        }
        catch (error) {
            yield ctx.reply(`–¢–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ .WEBM. –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–±—Ä–∞–Ω—ã –≤ —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ (https://core.telegram.org/stickers#video-sticker-requirements). `);
        }
    }
}));
bot.callbackQuery('edit', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _r, _s;
    if (yield checkSubscription(ctx)) {
        if ((_r = ctx.session.stickerPacks) === null || _r === void 0 ? void 0 : _r.length) {
            const keyboard = new grammy_1.InlineKeyboard();
            (_s = ctx.session.stickerPacks) === null || _s === void 0 ? void 0 : _s.forEach((elem, index) => {
                keyboard.text(elem.title, `myPack-${elem.name}`).row();
            });
            ctx.reply('–í—ã–±–µ—Ä–∏ —Å—Ç–∏–∫–µ—Ä  –ø–∞–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
                reply_markup: keyboard,
            });
            yield ctx.answerCallbackQuery();
        }
        else {
            ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤!');
        }
    }
    else {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
    }
}));
bot.callbackQuery('copy', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield checkSubscription(ctx)) {
        ctx.session.newStickerSetName = 'waiting_for_name_sticker';
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.');
        yield ctx.answerCallbackQuery();
    }
    else {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
    }
}));
bot.callbackQuery(/^myPack-/, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const nameOfStickerPack = ctx.callbackQuery.data.split('-')[1];
    console.log(nameOfStickerPack);
    console.log(nameOfStickerPack);
    console.log(nameOfStickerPack);
    console.log(nameOfStickerPack);
    const keyboard = new grammy_1.InlineKeyboard()
        .url('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä', `t.me/addstickers/${nameOfStickerPack}`)
        .row()
        .text('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'changeName')
        .row()
        .text('–î–æ–±–∞–≤–∏—Ç—å', 'addSticker')
        .text('–£–¥–∞–ª–∏—Ç—å', 'delSticker')
        .row()
        .text('–£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä', 'delStickerSet')
        .row()
        .text('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'menu')
        .row();
    ctx.reply('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', {
        reply_markup: keyboard,
    });
    ctx.session.selectedStickerPack = nameOfStickerPack;
    yield ctx.answerCallbackQuery();
}));
bot.callbackQuery('delStickerSet', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _t, _u;
    try {
        yield ctx.api.deleteStickerSet((_t = ctx.session.selectedStickerPack) !== null && _t !== void 0 ? _t : '');
        ctx.session.stickerPacks = (_u = ctx.session.stickerPacks) === null || _u === void 0 ? void 0 : _u.filter((el) => {
            if (el.name != ctx.session.selectedStickerPack) {
                return el;
            }
        });
        yield ctx.reply(`–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É–¥–∞–ª–µ–Ω`);
        yield ctx.answerCallbackQuery();
    }
    catch (error) {
        yield ctx.reply(`${error}`);
    }
}));
bot.callbackQuery('changeName', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    ctx.session.newStickerSetName = 'waiting_for_name_change';
    yield ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤a—à–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞');
    yield ctx.answerCallbackQuery();
}));
bot.callbackQuery('addSticker', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    ctx.session.newStickerSetName = 'waiting_for_add_sticker_to_set';
    yield ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞–±–æ—Ä');
    yield ctx.answerCallbackQuery();
}));
bot.callbackQuery('delSticker', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    ctx.session.newStickerSetName = 'waiting_for_del_sticker_from_set';
    yield ctx.reply('–û—Ç–ø—Ä–∞–≤—Ç–µ —Å—Ç–∏–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å');
    yield ctx.answerCallbackQuery();
}));
bot.callbackQuery('menu', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const keyboard = new grammy_1.InlineKeyboard()
        .text('–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üåÜ', 'create')
        .row()
        .text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ üåÖ', 'edit')
        .row()
        .text('–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ üåâ', 'copy');
    yield ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
}));
bot.start();
