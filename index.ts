import axios from 'axios';
import { Bot, Context, InlineKeyboard, InputFile, Keyboard, session, SessionFlavor } from 'grammy';
import sharp from 'sharp';
interface ShortStickerInfo {
  title: string;
  name: string;
}
interface MySession {
  newStickerSetName?: string;
  stickerPacks?: ShortStickerInfo[];
  type: string;
  selectedStickerPack: string | null;
}
type MyContext = Context & SessionFlavor<MySession>;
function initial(): MySession {
  return { newStickerSetName: '', stickerPacks: [], type: '', selectedStickerPack: null };
}
const bot = new Bot<MyContext>('xxx'); // <-- –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
bot.use(session({ initial }));
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
async function checkSubscription(ctx: Context) {
  // –ó–∞–º–µ–Ω–∏—Ç–µ 'channelusername' –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
  const member = await ctx.api.getChatMember('@STR_memes', ctx.from?.id ?? 1);
  return (
    member.status === 'member' || member.status === 'creator' || member.status === 'administrator'
  );
}
function getRandomString() {
  let result = '';
  const characters = 'abcdefghijklmnopqrstuvwxyzGQWERTTYUIOPASDHGFKCN';
  for (let i = 0; i < 7; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  if (await checkSubscription(ctx)) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new InlineKeyboard()
      .text('–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üåÜ', 'create')
      .row()
      .text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ üåÖ', 'edit')
      .row()
      .text('–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ üåâ', 'copy');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
  } else {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å–∏–º –µ–≥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\\
    const keyboard = new InlineKeyboard()
      .url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1 ‚úÖ', 'https://t.me/STR_memes')
      .url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 2 ‚úÖ', 'https://t.me/STR_memes');
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:', {
      reply_markup: keyboard,
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.callbackQuery('create', async (ctx) => {
  if (await checkSubscription(ctx)) {
    const keyboard = new Keyboard()
      .text('üñº –û–±—ã—á–Ω—ã–µ')
      .text('üé• –í–∏–¥–µ–æ')
      .row()
      .text('‚û°Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
      .resized();
    ctx.reply('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.', {
      reply_markup: keyboard,
    });
    await ctx.answerCallbackQuery();
  } else {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
  }
});

bot.hears('‚û°Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', async (ctx) => {
  if (await checkSubscription(ctx)) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new InlineKeyboard()
      .text('–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üåÜ', 'create')
      .row()
      .text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ üåÖ', 'edit')
      .row()
      .text('–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ üåâ', 'copy');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
  } else {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å–∏–º –µ–≥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\\
    const keyboard = new InlineKeyboard()
      .url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1 ‚úÖ', 'https://t.me/STR_memes')
      .url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 2 ‚úÖ', 'https://t.me/STR_memes');
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:', {
      reply_markup: keyboard,
    });
  }
});
bot.hears('üñº –û–±—ã—á–Ω—ã–µ', async (ctx) => {
  if (await checkSubscription(ctx)) {
    ctx.reply('üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞');
    ctx.session.newStickerSetName = 'waiting_for_name';
    ctx.session.type = 'photo';
  } else {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
  }
});
bot.hears('üé• –í–∏–¥–µ–æ', async (ctx) => {
  if (await checkSubscription(ctx)) {
    ctx.reply('üé• –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞');
    ctx.session.newStickerSetName = 'waiting_for_name_video';
    ctx.session.type = 'video';
  } else {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
  }
});

bot.on('message:text', async (ctx) => {
  if (ctx.session.newStickerSetName === 'waiting_for_name') {
    const stickerName = ctx.message.text; // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ -> –≤—ã–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è
    ctx.session.newStickerSetName = stickerName; // –ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
    console.log(ctx.session.stickerPacks);

    await ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.');
  } else if (ctx.session.newStickerSetName === 'waiting_for_name_video') {
    const stickerName = ctx.message.text;
    ctx.session.newStickerSetName = stickerName;
    console.log(ctx.session.stickerPacks);

    await ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫');
  } else if (ctx.session.newStickerSetName === 'waiting_for_name_sticker') {
    const stickerName = ctx.message.text; // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞(—Å–æ —Å—Ç–∏–∫–µ—Ä–æ–≤) -> –≤—ã–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è
    ctx.session.newStickerSetName = stickerName; // –ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
    console.log(ctx.session.stickerPacks);

    await ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ–¥–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.');
  } else if ((ctx.session.newStickerSetName = 'waiting_for_name_change')) {
    const stickerName = ctx.message.text;
    ctx.session.newStickerSetName = stickerName;
    try {
      console.log(ctx.session.selectedStickerPack);
      console.log(ctx.message.text);
      await ctx.api.setStickerSetTitle(
        ctx.session.selectedStickerPack ?? 'MyPack',
        `${ctx.message.text}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`,
      );
      ctx.session.stickerPacks = ctx.session.stickerPacks?.map((el) => {
        if (el.name == ctx.session.selectedStickerPack) {
          return { title: ctx.message.text, name: el.name };
        } else {
          return el;
        }
      });
      await ctx.reply(`–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${ctx.message.text}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`);
      console.log(ctx.session.stickerPacks);
    } catch (error) {
      await ctx.reply(`${error}`);
    }
  }
});
interface ISticker {
  sticker: string;
  emoji_list: string[];
  is_video?: boolean;
}

bot.on('message:sticker', async (ctx) => {
  try {
    if (ctx.session.newStickerSetName == 'waiting_for_del_sticker_from_set') {
      const stickerId = ctx.message.sticker.file_id;
      try {
        await ctx.api.deleteStickerFromSet(stickerId);
        await ctx.reply('–°—Ç–∏–∫–µ—Ä —É–¥–∞–ª—ë–Ω');
        ctx.session.newStickerSetName = 'waiting_for_name';
      } catch (error) {
        await ctx.reply('–°—Ç–∏–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—å—Å—è –≤ –Ω–∞–±–æ—Ä–µ');
      } // —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞
    } else if (ctx.session.newStickerSetName == 'waiting_for_add_sticker_to_set') {
      const stickerSet = await ctx.api.getStickerSet(ctx.session.selectedStickerPack ?? '');
      const stickerId = ctx.message.sticker.file_id;
      console.log(stickerSet);
      console.log(ctx.message.sticker);
      const stickerType = ctx.message.sticker.is_video;
      if (!stickerType && !stickerSet.is_video) {
        const stickerId = ctx.message.sticker.file_id;
        await ctx.api.addStickerToSet(ctx.from.id, ctx.session.selectedStickerPack ?? '', {
          sticker: stickerId,
          emoji_list: ['üôÇ'],
        });
        await ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω ');
        ctx.session.newStickerSetName = 'waiting_for_name';
      } else if (stickerType && stickerSet.is_video) {
        const stickerId = ctx.message.sticker.file_id;
        await ctx.api.addStickerToSet(ctx.from.id, ctx.session.selectedStickerPack ?? '', {
          sticker: stickerId,
          emoji_list: ['üôÇ'],
        });
        await ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω ');
        ctx.session.newStickerSetName = 'waiting_for_name';
      } else {
        await ctx.reply('–¢–∏–ø —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ —Å–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞');
      }
    } else if (
      ctx.session.newStickerSetName &&
      ctx.session.newStickerSetName != 'waiting_for_name'
    ) {
      const sticker = ctx.message.sticker.set_name;

      const stickerSet = await ctx.api.getStickerSet(`${sticker}`);
      const length = stickerSet.stickers.length;
      if (length > 50) {
        await ctx.reply('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ!');
        return;
      }
      let stickerSetForNewPack: ISticker[] = [];

      for (let i = 0; i < length; i++) {
        // –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ-—Å—Ç–∏–∫–µ—Ä
        if (stickerSet.stickers[i].is_video) {
          await ctx.reply('–í–∏–¥–µ–æ —Å—Ç–∏–∫–µ—Ä—ã - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
        } else {
          stickerSetForNewPack.push({
            sticker: stickerSet.stickers[i].file_id,
            emoji_list: [stickerSet.stickers[i].emoji ?? ''],
            is_video: stickerSet.is_video,
          });
        }
      }
      console.log(stickerSet);
      console.log(stickerSetForNewPack);
      const name = `${getRandomString()}_by_${bot.botInfo.username}`;
      console.log(name);

      await ctx.api.createNewStickerSet(
        ctx.from.id,
        name,
        `${ctx.session.newStickerSetName}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`,
        stickerSetForNewPack,
        stickerSet.is_video ? 'video' : stickerSet.is_animated ? 'animated' : 'static',
      );

      const userLocalStickerSet = await ctx.api.getStickerSet(name);
      ctx.api.sendSticker(ctx.chat.id, userLocalStickerSet.stickers[0].file_id);
      ctx.session.stickerPacks?.push({ title: ctx.session.newStickerSetName, name: name });
      console.log(ctx.session.stickerPacks);
      ctx.session.newStickerSetName = 'waiting_for_name';
    } else {
      await ctx.reply('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞');
    }
  } catch (error) {
    await ctx.reply(`${error}`);
  }
});

bot.on('message:photo', async (ctx) => {
  if (ctx.session.newStickerSetName == 'waiting_for_add_sticker_to_set') {
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    const fileId = ctx.message?.photo[ctx.message?.photo.length - 1].file_id;
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const file = await ctx.api.getFile(fileId ?? '');

      // –°–æ—Å—Ç–∞–≤–ª—è–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞
      const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });

      // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ 512x512 —Å –ø–æ–º–æ—â—å—é sharp
      const resizedPhoto = await sharp(response.data)
        .resize(512, 512, { fit: 'contain', position: 'center' })
        .toBuffer();
      const stickerFile = new InputFile(resizedPhoto, 'sticker.png');
      await ctx.api.addStickerToSet(ctx.from.id, ctx.session.selectedStickerPack ?? '', {
        sticker: stickerFile,
        emoji_list: ['üôÇ'],
      });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (error) {
      console.error(error);
    }
  } else if (ctx.session.newStickerSetName) {
    const fileId = ctx.message?.photo[ctx.message?.photo.length - 1].file_id;
    // –°–æ—Å—Ç–∞–≤–ª—è–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞
    const file = await ctx.api.getFile(fileId ?? '');
    const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });

    // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ 512x512 —Å –ø–æ–º–æ—â—å—é sharp
    const resizedPhoto = await sharp(response.data).resize(512, 512).toBuffer();
    const stickerFile = new InputFile(resizedPhoto, 'sticker.png');
    const sticker = {
      sticker: stickerFile,
      emoji_list: ['üôÇ'],
    };
    const name = `${getRandomString()}_by_${bot.botInfo.username}`;
    await ctx.api.createNewStickerSet(
      ctx.from.id,
      name,
      `${ctx.session.newStickerSetName}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`,
      [sticker],
      'static',
    );
    ctx.session.stickerPacks?.push({
      name: name,
      title: ctx.session.newStickerSetName,
    });
    const userLocalStickerSet = await ctx.api.getStickerSet(name);
    ctx.api.sendSticker(ctx.chat.id, userLocalStickerSet.stickers[0].file_id);
  }
});
bot.on('message:document', async (ctx) => {
  console.log(1);
  if (ctx.session.newStickerSetName == 'waiting_for_add_sticker_to_set') {
    const fileId = ctx.message.document.file_id;
    await ctx.api.addStickerToSet(ctx.from.id, ctx.session.selectedStickerPack ?? '', {
      sticker: fileId,
      emoji_list: ['üôÇ'],
    });
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
  } else if (ctx.session.newStickerSetName) {
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π ID –≤–∏–¥–µ–æ
    console.log(2);
    const fileId = ctx.message.document.file_id;
    try {
      const sticker = {
        sticker: fileId,
        emoji_list: ['üôÇ'],
        is_video: true,
      };
      const name = `${getRandomString()}_by_${bot.botInfo.username}`;
      await ctx.api.createNewStickerSet(
        ctx.from.id,
        name,
        `${ctx.session.newStickerSetName}_ @—Å—Å—ã–ª–∫–∞–Ω–∞–∫–∞–Ω–∞–ª`,
        [sticker],
        'video',
      );
      ctx.session.stickerPacks?.push({
        name: name,
        title: ctx.session.newStickerSetName,
      });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const userLocalStickerSet = await ctx.api.getStickerSet(name);
      ctx.api.sendSticker(ctx.chat.id, userLocalStickerSet.stickers[0].file_id);
      await ctx.reply('–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (error) {
      await ctx.reply(
        `–¢–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ .WEBM. –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–±—Ä–∞–Ω—ã –≤ —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ (https://core.telegram.org/stickers#video-sticker-requirements). `,
      );
    }
  }
});
bot.callbackQuery('edit', async (ctx) => {
  if (await checkSubscription(ctx)) {
    if (ctx.session.stickerPacks?.length) {
      const keyboard = new InlineKeyboard();
      ctx.session.stickerPacks?.forEach((elem, index) => {
        keyboard.text(elem.title, `myPack-${elem.name}`).row();
      });
      ctx.reply('–í—ã–±–µ—Ä–∏ —Å—Ç–∏–∫–µ—Ä  –ø–∞–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
        reply_markup: keyboard,
      });
      await ctx.answerCallbackQuery();
    } else {
      ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤!');
    }
  } else {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
  }
});

bot.callbackQuery('copy', async (ctx) => {
  if (await checkSubscription(ctx)) {
    ctx.session.newStickerSetName = 'waiting_for_name_sticker';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.');
    await ctx.answerCallbackQuery();
  } else {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
  }
});

bot.callbackQuery(/^myPack-/, async (ctx) => {
  const nameOfStickerPack = ctx.callbackQuery.data.split('-')[1];
  console.log(nameOfStickerPack);
  console.log(nameOfStickerPack);
  console.log(nameOfStickerPack);
  console.log(nameOfStickerPack);
  const keyboard = new InlineKeyboard()
    .url('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä', `t.me/addstickers/${nameOfStickerPack}`)
    .row()
    .text('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'changeName')
    .row()
    .text('–î–æ–±–∞–≤–∏—Ç—å', 'addSticker')
    .text('–£–¥–∞–ª–∏—Ç—å', 'delSticker')
    .row()
    .text('–£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä', 'delStickerSet')
    .row()
    .text('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'menu')
    .row();
  ctx.reply('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', {
    reply_markup: keyboard,
  });
  ctx.session.selectedStickerPack = nameOfStickerPack;
  await ctx.answerCallbackQuery();
});
bot.callbackQuery('delStickerSet', async (ctx) => {
  try {
    await ctx.api.deleteStickerSet(ctx.session.selectedStickerPack ?? '');
    ctx.session.stickerPacks = ctx.session.stickerPacks?.filter((el) => {
      if (el.name != ctx.session.selectedStickerPack) {
        return el;
      }
    });
    await ctx.reply(`–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É–¥–∞–ª–µ–Ω`);
    await ctx.answerCallbackQuery();
  } catch (error) {
    await ctx.reply(`${error}`);
  }
});
bot.callbackQuery('changeName', async (ctx) => {
  ctx.session.newStickerSetName = 'waiting_for_name_change';
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤a—à–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞');

  await ctx.answerCallbackQuery();
});

bot.callbackQuery('addSticker', async (ctx) => {
  ctx.session.newStickerSetName = 'waiting_for_add_sticker_to_set';
  await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞–±–æ—Ä');

  await ctx.answerCallbackQuery();
});

bot.callbackQuery('delSticker', async (ctx) => {
  ctx.session.newStickerSetName = 'waiting_for_del_sticker_from_set';
  await ctx.reply('–û—Ç–ø—Ä–∞–≤—Ç–µ —Å—Ç–∏–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å');
  await ctx.answerCallbackQuery();
});
bot.callbackQuery('menu', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üåÜ', 'create')
    .row()
    .text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ üåÖ', 'edit')
    .row()
    .text('–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ üåâ', 'copy');
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
});
bot.start();
